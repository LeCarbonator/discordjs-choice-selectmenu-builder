{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import {\r\n    APISelectMenuOption,\r\n    APIStringSelectComponent,\r\n    ActionRowBuilder,\r\n    ButtonBuilder,\r\n    ButtonInteraction,\r\n    ButtonStyle,\r\n    Collection,\r\n    MessageComponentInteraction,\r\n    StringSelectMenuBuilder,\r\n    StringSelectMenuInteraction\r\n} from 'discord.js';\r\n\r\n/**\r\n * Represents a callback function that is passed to Array prototype methods such as\r\n * `.map()`, `.filter()` and `.forEach()` .\r\n */\r\ntype ArrayCallback<T, ReturnValue> = (\r\n    element: T,\r\n    index: number,\r\n    array: T[]\r\n) => ReturnValue;\r\n\r\ntype PageSelectComponent<ChoiceType> = {\r\n    /**\r\n     * The custom ID that this select menu uses.\r\n     */\r\n    customId?: string;\r\n    /**\r\n     * The minimum amount of choices that a user must make.\r\n     * Note that it only prevents selecting less than this value, it\r\n     * can still be visually shown without any selections.\r\n     */\r\n    minChoices: number;\r\n    /**\r\n     * The maximum amount of choices that a user may make.\r\n     * This value defaults to `options.length`.\r\n     */\r\n    maxChoices?: number;\r\n    /**\r\n     * A collection of selected values and the index they are found at.\r\n     * The key is used to ensure pagination is applied correctly\r\n     * The values represent the selected items of the array.\r\n     */\r\n    selected: Collection<number, ChoiceType>;\r\n    /**\r\n     * Whether or not the selected items are carried throughout each page.\r\n     * This is an edge case where `minChoices === maxChoices`, which would\r\n     * otherwise prevent changing pages and values.\r\n     * @internal\r\n     */\r\n    carrySelected: boolean;\r\n    /**\r\n     * The placeholder to display on the select menu.\r\n     */\r\n    placeholder?: string | ((minChoices: number, maxChoices: number) => string);\r\n    /**\r\n     * The callback function to transform an array element into a readable\r\n     * label string. Note that discord's character limit on labels apply.\r\n     * @param option An element from the `options` array.\r\n     * @param index The element's index in the `options` array.\r\n     * @returns A string that must be below Discord's character limit for\r\n     * select menu option labels.\r\n     * @see {@link https://discord.com/developers/docs/interactions/message-components#select-menu-object-select-option-structure}\r\n     */\r\n    labelFn: (option: ChoiceType, index: number) => string;\r\n    /**\r\n     * The callback function to transform an array element into a readable\r\n     * description string. Note that discord's character limit on descriptions apply.\r\n     * Will not create a description by default.\r\n     * @param option An element from the `options` array.\r\n     * @param index The element's index in the `options` array.\r\n     * @returns A string that must be below Discord's character limit for\r\n     * select menu option descriptions.\r\n     * @see {@link https://discord.com/developers/docs/interactions/message-components#select-menu-object-select-option-structure}\r\n     */\r\n    descriptionFn?: (option: ChoiceType, index: number) => string;\r\n    /**\r\n     * Stores the current page data of this builder.\r\n     */\r\n    page: {\r\n        /**\r\n         * The 0-indexed page the builder is currently on.\r\n         * This is always in the range `0 <= current <= max`\r\n         */\r\n        current: number;\r\n        /**\r\n         * The maximum 0-indexed page the builder can reach.\r\n         * This property is derived from the page's length\r\n         */\r\n        max: number;\r\n        /**\r\n         * The length that a single select menu page can have.\r\n         * This property defaults to Discord's limit, although\r\n         * it may be lower depending on the `carrySelected` edge case.\r\n         */\r\n        length: number;\r\n    };\r\n    /**\r\n     * Stores the current button styles of this builder.\r\n     */\r\n    buttonStyles: {\r\n        /**\r\n         * The button style for the nagivator buttons, which include\r\n         * ⏮️,◀️,▶️, and ⏭️.\r\n         * Note that navigator buttons only show up if there are more\r\n         * options than the defined page length of this builder.\r\n         */\r\n        navigator: Exclude<ButtonStyle, ButtonStyle.Link>;\r\n        /**\r\n         * The button style for the center button displaying the available\r\n         * pages.\r\n         * Note that navigator buttons only show up if there are more\r\n         * options than the defined page length of this builder.\r\n         */\r\n        middle: Exclude<ButtonStyle, ButtonStyle.Link>;\r\n    };\r\n};\r\n\r\n/**\r\n * The three types of Tuples that are generated\r\n * by the UserChoiceComponent. It either includes\r\n * only the select menu, or it also includes\r\n * the page buttons. If there are no elements\r\n * present, it will return empty.\r\n */\r\ntype PageSelectMenuActionRow =\r\n    | []\r\n    | [menu: ActionRowBuilder<StringSelectMenuBuilder>]\r\n    | [\r\n          pageButtons: ActionRowBuilder<ButtonBuilder>,\r\n          menu: ActionRowBuilder<StringSelectMenuBuilder>\r\n      ];\r\n\r\n/**\r\n * Represents the three main types of setting values as selected.\r\n * If the passed type is not a function, it will resort to\r\n * Array.prototype.includes() and Object.is() to compare the passed\r\n * value instead.\r\n */\r\ntype SelectCallback<ChoiceType> =\r\n    | ChoiceType\r\n    | ChoiceType[]\r\n    | ArrayCallback<ChoiceType, boolean>;\r\n\r\n/**\r\n * Manages a select menu interface to select elements in an array.\r\n */\r\nexport class ChoiceSelectMenuBuilder<ChoiceType> {\r\n    public constructor(\r\n        choices: ChoiceType[],\r\n        selected?: SelectCallback<ChoiceType>\r\n    ) {\r\n        const selectedFn = this.narrowSelectCallback(selected);\r\n        this.data = {\r\n            selected: new Collection(),\r\n            labelFn: (value) => `${value}`,\r\n            minChoices: 0,\r\n            carrySelected: false,\r\n            page: {\r\n                current: 0,\r\n                length: ChoiceSelectMenuBuilder.OPTIONS_LIMIT,\r\n                max: Math.floor(\r\n                    choices.length / ChoiceSelectMenuBuilder.OPTIONS_LIMIT\r\n                )\r\n            },\r\n            buttonStyles: {\r\n                navigator: ButtonStyle.Primary,\r\n                middle: ButtonStyle.Danger\r\n            }\r\n        };\r\n        this.options = choices;\r\n        this.addValues(selectedFn);\r\n    }\r\n\r\n    /**\r\n     * The maximum amount of select menu options that\r\n     * discord accepts. As of Mar 6 2024, it is 25.\r\n     */\r\n    static readonly OPTIONS_LIMIT = 25;\r\n\r\n    /**\r\n     * Contains all data related to this builder instance.\r\n     */\r\n    data: PageSelectComponent<ChoiceType>;\r\n    /**\r\n     * A reference to the array this builder represents.\r\n     */\r\n    options: ChoiceType[];\r\n\r\n    /**\r\n     * Sets the custom ID of this builder.\r\n     * @param {string} customId The custom ID to set\r\n     * @returns {ChoiceSelectMenuBuilder}\r\n     */\r\n    public setCustomId(customId: string): this {\r\n        this.data.customId = customId;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the minimum amount of choices of this builder. Defaults to\r\n     * 0 for every new instance.\r\n     * @param {number} amount The minimum amount of choices to select in this menu.\r\n     * @returns {ChoiceSelectMenuBuilder}\r\n     */\r\n    public setMinChoices(amount: number): this {\r\n        if (amount > ChoiceSelectMenuBuilder.OPTIONS_LIMIT)\r\n            throw new Error(\"MinChoices may not be above Discord's limit\");\r\n        if (amount < 0) throw new Error('MinChoices must not be negative.');\r\n        if (amount > this.options.length)\r\n            throw new Error(\r\n                'MinChoices must not exceed the amount of available options.'\r\n            );\r\n\r\n        this.data.minChoices = amount;\r\n        this.updatePageProps();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the maximum amount of choices of this select menu.\r\n     * @param {number} amount The maximum amount of choices to select in this menu.\r\n     * @returns {ChoiceSelectMenuBuilder}\r\n     */\r\n    public setMaxChoices(amount: number): this {\r\n        if (amount <= 0) throw new Error('MaxChoices may not be 0 or lower.');\r\n        if (amount > this.options.length)\r\n            throw new Error(\r\n                'MaxChoices must not exceed the amount of available options.'\r\n            );\r\n        this.data.maxChoices = amount;\r\n        this.updatePageProps();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the callback function to transform an array element into a readable\r\n     * label string. Note that discord's character limit on labels apply.\r\n     * @param {visualizeCallback} labelFn - The callback function to transform the element.\r\n     * @returns A string that must be below Discord's character limit for\r\n     * select menu option labels.\r\n     * @see {@link https://discord.com/developers/docs/interactions/message-components#select-menu-object-select-option-structure}\r\n     * @returns {ChoiceSelectMenuBuilder}\r\n     */\r\n    public setLabel(labelFn: PageSelectComponent<ChoiceType>['labelFn']): this {\r\n        this.data.labelFn = labelFn;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the callback function to transform an array element into a readable\r\n     * description string. Note that discord's character limit on descriptions apply.\r\n     * Will not create a description by default.\r\n     * @param {visualizeCallback} descriptionFn - The callback function to transform the element.\r\n     * @returns A string that must be below Discord's character limit for\r\n     * select menu option descriptions.\r\n     * @see {@link https://discord.com/developers/docs/interactions/message-components#select-menu-object-select-option-structure}\r\n     */\r\n    public setDescription(\r\n        descriptionFn: NonNullable<\r\n            PageSelectComponent<ChoiceType>['descriptionFn']\r\n        > | null\r\n    ): this {\r\n        if (descriptionFn === null) {\r\n            delete this.data.descriptionFn;\r\n            return this;\r\n        }\r\n        this.data.descriptionFn = descriptionFn;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the button styles for the navigator buttons.\r\n     * @param navigators The desired style for the navigator buttons.\r\n     * @param centerButton The desired style for the center button displaying the current page.\r\n     */\r\n    public setButtonStyles(\r\n        navigators: Exclude<ButtonStyle, ButtonStyle.Link>,\r\n        centerButton: Exclude<ButtonStyle, ButtonStyle.Link>\r\n    ): this {\r\n        this.data.buttonStyles.navigator = navigators;\r\n        this.data.buttonStyles.middle = centerButton ?? ButtonStyle.Danger;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the placeholder of this builder's select menu.\r\n     * @param placeholder A static string to set as placeholder\r\n     *\r\n     * Note that the placeholder must be below discord's placeholder character limit.\r\n     * @see {@link https://discord.com/developers/docs/interactions/message-components#select-menu-object-select-menu-structure}\r\n     */\r\n    public setPlaceholder(placeholder: string | null): this;\r\n    /**\r\n     * Set the placeholder of this builder's select menu.\r\n     * @param placeholder A callback function to dynamically set the placeholder. Passes\r\n     * the minimum and maximum choices of the current select menu.\r\n     *\r\n     * Note that the placeholder must be below discord's placeholder character limit.\r\n     * @see {@link https://discord.com/developers/docs/interactions/message-components#select-menu-object-select-menu-structure\r\n     */\r\n    public setPlaceholder(\r\n        placeholder: ((minChoices: number, maxChoices: number) => string) | null\r\n    ): this;\r\n    public setPlaceholder(\r\n        placeholder:\r\n            | string\r\n            | ((minChoices: number, maxChoices: number) => string)\r\n            | null\r\n    ): this {\r\n        if (placeholder === null) {\r\n            delete this.data.placeholder;\r\n            return this;\r\n        }\r\n        this.data.placeholder = placeholder;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the selected values of this builder.\r\n     * @param selected The value, array of values, or callback function to\r\n     * determine the selected elements. Note that an array of values defaults to\r\n     * `Array.prototype.includes()`, which may fail for non-primitive types.\r\n     * @returns {ChoiceSelectMenuBuilder}\r\n     */\r\n    public setValues(selected: SelectCallback<ChoiceType>): this {\r\n        this.data.selected.clear();\r\n        this.addValues(selected);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add the selected values of this builder.\r\n     * @param selected The value, array of values, or callback function to\r\n     * determine the additional selected elements. Note that an array of values defaults to\r\n     * `Array.prototype.includes()`, which may fail for non-primitive types.\r\n     * @returns {ChoiceSelectMenuBuilder}\r\n     */\r\n    public addValues(selected: SelectCallback<ChoiceType>): this {\r\n        const selectFn = this.narrowSelectCallback(selected);\r\n        const collection = this.data.selected;\r\n        this.options.forEach((option, index, arr) => {\r\n            if (selectFn(option, index, arr)) {\r\n                collection.set(index, option);\r\n            }\r\n        });\r\n\r\n        const maxChoices = this.data.maxChoices ?? this.options.length;\r\n\r\n        if (maxChoices < this.data.selected.size)\r\n            throw new Error('MaxChoices in this menu ');\r\n\r\n        this.updatePageProps();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Filters the selected values based on the provided function.\r\n     * @param valueFn The callback function to use as filter. If this function\r\n     * resolves to false, the selected value is removed from this menu.\r\n     * @returns {ChoiceSelectMenuBuilder}\r\n     */\r\n    public filterValues(\r\n        valueFn: (value: ChoiceType, index: number) => boolean\r\n    ): this {\r\n        this.data.selected = this.data.selected.filter(valueFn);\r\n        this.updatePageProps();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clears all selected values from this menu.\r\n     * @returns {ChoiceSelectMenuBuilder}\r\n     */\r\n    public clearValues(): this {\r\n        this.data.selected.clear();\r\n        this.updatePageProps();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes the last selected value and returns it.\r\n     * If there are no selected values, it will return undefined.\r\n     *\r\n     */\r\n    public popValue(): ChoiceType | undefined {\r\n        const lastKey = this.data.selected.lastKey();\r\n        if (typeof lastKey === 'undefined') return undefined;\r\n\r\n        const value = this.data.selected.get(lastKey);\r\n        this.data.selected.delete(lastKey);\r\n        this.updatePageProps();\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Returns a shallow copy of options that are visible on the current page.\r\n     * If no page is specified, it will return the current page.\r\n     * @param {number|undefined} page The page to fetch options from.\r\n     */\r\n    public optionsOnPage(page: number = this.data.page.current): ChoiceType[] {\r\n        if (this.options.length <= this.data.page.length) {\r\n            return this.options;\r\n        }\r\n        const start = page * this.data.page.length;\r\n        const end = start + this.data.page.length;\r\n        if (this.data.carrySelected) {\r\n            return [...this.values, ...this.options.slice(start, end)];\r\n        }\r\n        return this.options.slice(start, end);\r\n    }\r\n\r\n    /**\r\n     * Determines the selected values on the current page. If no\r\n     * parameter is provided, it will take the current page.\r\n     *\r\n     * Note that if you have the same amount of minChoices as maxChoices,\r\n     * the selected options will ALWAYS be present on the page.\r\n     * @param page The page to review\r\n     */\r\n    public selectedOnPage(onPage = this.data.page.current): ChoiceType[] {\r\n        if (this.data.carrySelected) return [...this.data.selected.values()];\r\n        const { selected, page } = this.data;\r\n\r\n        const start = onPage * page.length;\r\n        const end = start + page.length;\r\n\r\n        return this.options\r\n            .slice(start, end)\r\n            .filter((_, i) => selected.has(start + i));\r\n    }\r\n\r\n    /**\r\n     * The selected values of this select menu.\r\n     * Returns a shallow copy of the provided choices.\r\n     * If you only need the first property, consider using\r\n     * {@link ChoiceSelectMenuBuilder#firstValue}\r\n     */\r\n    public get values(): ChoiceType[] {\r\n        return [...this.data.selected.values()];\r\n    }\r\n\r\n    /**\r\n     * The first selected value of this select menu.\r\n     */\r\n    public get firstValue(): ChoiceType | undefined {\r\n        return this.data.selected.first();\r\n    }\r\n\r\n    /**\r\n     * Provides default function behaviour for non-functions passed to\r\n     * methods.\r\n     * ```\r\n     * const selected = [1, 2, 3];\r\n     * selectMenu.narrowSelectCallback(selected) // this is now (v) => selected.includes(v)\r\n     * ```\r\n     * @param selected The provided value or function to narrow down into a select function.\r\n     * @returns A function callback that can be used in `Array.prototype.filter()` and the like.\r\n     */\r\n    private narrowSelectCallback(\r\n        selected: SelectCallback<ChoiceType> | undefined\r\n    ): ArrayCallback<ChoiceType, boolean> {\r\n        if (typeof selected === 'undefined') {\r\n            return () => false;\r\n        }\r\n        if (Array.isArray(selected)) {\r\n            return (v) => selected.includes(v);\r\n        }\r\n        if (typeof selected !== 'function') {\r\n            return (v) => Object.is(v, selected);\r\n        }\r\n        return selected as ArrayCallback<ChoiceType, boolean>;\r\n    }\r\n\r\n    /**\r\n     * Changes the paginated menu to the first page. If the maximum\r\n     * amount of choices has been reached, it only skips to pages with\r\n     * selections on it.\r\n     * @returns {ChoiceSelectMenuBuilder}\r\n     */\r\n    public toFirstPage(): this {\r\n        const { page, selected } = this.data;\r\n        const { maxChoices = this.options.length } = this.data;\r\n        if (this.options.length <= page.length) return this;\r\n\r\n        if (selected.size < maxChoices || this.data.carrySelected) {\r\n            page.current = 0;\r\n            return this;\r\n        }\r\n\r\n        // we want to avoid exceeding our maxChoices. Therefore, if we have\r\n        // already a full amount of choices, we only go back the first\r\n        // page that has selections on it.\r\n\r\n        // maxChoices is always > 0, so selected.size cannot be 0 from if guard above\r\n        page.current = Math.floor(selected.firstKey()! / page.length);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Changes the paginated menu to the previous page. If the maximum\r\n     * amount of choices has been reached, only skips to pages with\r\n     * selections on it.\r\n     * @returns {ChoiceSelectMenuBuilder}\r\n     */\r\n    public toPreviousPage(): this {\r\n        const { page, selected } = this.data;\r\n        const { maxChoices = this.options.length } = this.data;\r\n        if (this.options.length <= page.length) return this;\r\n\r\n        if (selected.size < maxChoices || this.data.carrySelected) {\r\n            page.current = Math.max(page.current - 1, 0);\r\n            return this;\r\n        }\r\n\r\n        // we want to avoid exceeding our maxChoices. Therefore, if we have\r\n        // already a full amount of choices, we only go back to the closest\r\n        // page that has selections on it.\r\n        const currentPageStart = page.current * page.length;\r\n        // maxChoices is always > 0, so selected.size cannot be 0 from if guard above\r\n        const maxPreviousIndex = selected\r\n            .filter((_, n) => n < currentPageStart)\r\n            .lastKey();\r\n        if (typeof maxPreviousIndex === 'undefined') return this;\r\n        page.current = Math.floor(maxPreviousIndex / page.length);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Changes the paginated menu to the next page. If the maximum\r\n     * amount of choices has been reached, only skips to pages with\r\n     * selections on it.\r\n     * @returns {ChoiceSelectMenuBuilder}\r\n     */\r\n    public toNextPage(): this {\r\n        const { page, selected } = this.data;\r\n        const { maxChoices = this.options.length } = this.data;\r\n\r\n        if (this.options.length <= page.length) return this;\r\n\r\n        if (selected.size < maxChoices || this.data.carrySelected) {\r\n            page.current = Math.min(page.current + 1, page.max);\r\n            return this;\r\n        }\r\n\r\n        // we want to avoid exceeding our maxChoices. Therefore, if we have\r\n        // already a full amount of choices, we only go forward to the closest\r\n        // page that has selections on it.\r\n        const currentPageEnd = page.current * page.length + page.length;\r\n        const minNextIndex = selected\r\n            .filter((_, n) => n >= currentPageEnd)\r\n            .lastKey();\r\n        if (typeof minNextIndex === 'undefined') return this;\r\n\r\n        page.current = Math.floor(minNextIndex / page.length);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Changes the paginated menu to the last page. If the maximum\r\n     * amount of choices has been reached, it only skips to pages with\r\n     * selections on it.\r\n     * @returns {ChoiceSelectMenuBuilder}\r\n     */\r\n    public toLastPage(): this {\r\n        const { page, selected } = this.data;\r\n        const { maxChoices = this.options.length } = this.data;\r\n        if (this.options.length <= page.length) return this;\r\n\r\n        if (selected.size < maxChoices || this.data.carrySelected) {\r\n            page.current = page.max;\r\n            return this;\r\n        }\r\n\r\n        // we want to avoid exceeding our maxChoices. Therefore, if we have\r\n        // already a full amount of choices, we only go forward to the last\r\n        // page that has selections on it.\r\n\r\n        // maxChoices is always > 0, so selected.size cannot be 0 from if guard above\r\n        page.current = Math.floor(selected.lastKey()! / page.length);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates the action row based on this builder.\r\n     * If the passed `options` array is empty, no select menu will be generated.\r\n     * If the array exceeds discord's limit for select menus,\r\n     * a second row of page buttons will be passed.\r\n     */\r\n    public toActionRow(): PageSelectMenuActionRow {\r\n        // ----------------------------------\r\n        // Below Select Menu Minimum\r\n        if (this.options.length === 0) return [];\r\n        if (typeof this.data.customId === 'undefined') {\r\n            throw new Error(\r\n                'ChoiceSelectMenuBuilder.customId: expected a string primitive'\r\n            );\r\n        }\r\n\r\n        const {\r\n            customId,\r\n            minChoices,\r\n            placeholder,\r\n            selected,\r\n            page,\r\n            carrySelected,\r\n            maxChoices = this.options.length\r\n        } = this.data;\r\n\r\n        const isPaginated = this.options.length > page.length;\r\n\r\n        const currentMin = isPaginated ? 0 : minChoices;\r\n        const currentMax = Math.min(\r\n            // - maxChoices could be = this.options.length, so\r\n            //      cap at this.optionsAtPage().length\r\n            // - if there's only one page, then\r\n            //      this.selected.length === this.selectedOnPage().length,\r\n            //   so they cancel each other out. This is only for pagination\r\n            //   purposes.\r\n            maxChoices - selected.size + this.selectedOnPage().length,\r\n            this.optionsOnPage().length\r\n        );\r\n\r\n        const selectMenuData = {\r\n            custom_id: customId,\r\n            min_values: currentMin,\r\n            max_values: currentMax\r\n        } as Partial<APIStringSelectComponent>;\r\n\r\n        switch (typeof placeholder) {\r\n            case 'function':\r\n                selectMenuData.placeholder = placeholder(\r\n                    currentMin,\r\n                    currentMax\r\n                );\r\n                break;\r\n            case 'string':\r\n                selectMenuData.placeholder = placeholder;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        const selectMenu = new StringSelectMenuBuilder(selectMenuData);\r\n\r\n        // ----------------------------------\r\n        // No Pagination\r\n        if (!isPaginated) {\r\n            const apiOptions = this.visualizeOptions();\r\n            selectMenu.addOptions(apiOptions);\r\n\r\n            return [\r\n                new ActionRowBuilder<StringSelectMenuBuilder>({\r\n                    components: [selectMenu]\r\n                })\r\n            ];\r\n        }\r\n\r\n        // ----------------------------------\r\n        // Pagination\r\n        const start = page.current * page.length;\r\n        const end = start + page.length;\r\n\r\n        if (carrySelected) {\r\n            const rawOptions = this.options\r\n                .slice(start, end + this.data.selected.size)\r\n                .map<[number, ChoiceType]>((option, i) => [i + start, option]);\r\n            const currentOptions: [number, ChoiceType][] = [\r\n                ...this.data.selected.entries(),\r\n                ...rawOptions.filter((v) => !this.data.selected.has(v[0]))\r\n            ];\r\n            selectMenu.addOptions(\r\n                currentOptions.map((v) => this.toAPISelectMenuOption(...v))\r\n            );\r\n        } else {\r\n            selectMenu.addOptions(\r\n                this.options\r\n                    .slice(start, end)\r\n                    .map((option, i) =>\r\n                        this.toAPISelectMenuOption(i + start, option)\r\n                    )\r\n            );\r\n        }\r\n\r\n        return [\r\n            this.navigatorButtons,\r\n            new ActionRowBuilder<StringSelectMenuBuilder>({\r\n                components: [selectMenu]\r\n            })\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Determines whether or not the interaction belongs to this builder.\r\n     * If the interaction belongs to this builder, it handles the received\r\n     * interaction response.\r\n     * @param interaction The component interaction response to check\r\n     */\r\n    public isInteraction(interaction: MessageComponentInteraction): boolean {\r\n        if (!this.hasComponent(interaction)) return false;\r\n\r\n        if (interaction.isButton()) {\r\n            const getPageButtonId = interaction.customId.split('--')?.pop();\r\n            switch (getPageButtonId) {\r\n                case 'firstPage':\r\n                    this.toFirstPage();\r\n                    break;\r\n                case 'prevPage':\r\n                    this.toPreviousPage();\r\n                    break;\r\n                case 'nextPage':\r\n                    this.toNextPage();\r\n                    break;\r\n                case 'lastPage':\r\n                    this.toLastPage();\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        // remove keys on current page\r\n        const start = this.data.page.current * this.data.page.length;\r\n        const end = start + this.data.page.length;\r\n        this.filterValues((_, i) => i >= end || i < start);\r\n\r\n        const idsOnPage = this.getIndecesFromValues(interaction.values);\r\n        for (const i of idsOnPage) {\r\n            const selectedOption = this.options.at(i);\r\n            if (typeof selectedOption === 'undefined') continue;\r\n            this.data.selected.set(i, selectedOption);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Determines whether or not the interaction belongs to this builder.\r\n     * @param interaction The interaction to narrow\r\n     * @returns {boolean}\r\n     */\r\n    private hasComponent(\r\n        interaction: MessageComponentInteraction\r\n    ): interaction is ButtonInteraction | StringSelectMenuInteraction {\r\n        return (\r\n            typeof this.data.customId !== 'undefined' &&\r\n            interaction.customId.startsWith(this.data.customId)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Transform an array of values (from a select menu)\r\n     * into the ending digits. This assumes that the StringSelectMenuInteraction\r\n     * belongs to this ChoiceSelectMenuBuilder. If that assumption is not met or there\r\n     * is some issue with the custom IDs, they will be filtered out.\r\n     * @param values The values to transform into digits.\r\n     */\r\n    private getIndecesFromValues(values: string[]): number[] {\r\n        const isNumeric = (n: number) => !isNaN(n) && isFinite(n);\r\n\r\n        return values\r\n            .map((v) => Number(v.split('--')?.pop()))\r\n            .filter(isNumeric);\r\n    }\r\n\r\n    /**\r\n     * Update the carrySelected, pageLength and maxPage properties\r\n     * to the new values.\r\n     */\r\n    private updatePageProps(): void {\r\n        this.data.carrySelected = this.data.minChoices === this.data.maxChoices;\r\n\r\n        this.data.page.length = ChoiceSelectMenuBuilder.OPTIONS_LIMIT;\r\n        if (this.data.carrySelected) {\r\n            this.data.page.length -= this.data.selected.size;\r\n        }\r\n\r\n        this.data.page.max = Math.floor(\r\n            this.options.length / this.data.page.length\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Transforms the provided option into a usable API Select Menu Option.\r\n     * @param i The index of the array to transform at.\r\n     * @param value The value to transform.\r\n     */\r\n    private toAPISelectMenuOption(\r\n        i: number,\r\n        value: ChoiceType\r\n    ): APISelectMenuOption {\r\n        const offset = this.data.page.current * this.data.page.length;\r\n        return {\r\n            label: this.data.labelFn(value, i),\r\n            description: this.data.descriptionFn?.(value, i),\r\n            default: this.data.selected.has(i + offset),\r\n            value: `${this.data.customId}--${i + offset}`\r\n        } as APISelectMenuOption;\r\n    }\r\n    /**\r\n     * Transforms the options into a usable API Select Menu Option.\r\n     * @param start The start of the slice to map. Leave undefined to\r\n     * directly access the options array.\r\n     * @param end The end of the slice to map. Defaults to the end\r\n     * of the options array.\r\n     */\r\n    private visualizeOptions(\r\n        start?: number,\r\n        end?: number\r\n    ): APISelectMenuOption[] {\r\n        if (typeof start === 'undefined') {\r\n            return this.options.map((v, i) => this.toAPISelectMenuOption(i, v));\r\n        }\r\n\r\n        return this.options\r\n            .slice(start, end)\r\n            .map((v, i) => this.toAPISelectMenuOption(i + start, v));\r\n    }\r\n\r\n    /**\r\n     * Generates the page buttons for the currently selected page.\r\n     * Disables buttons dependent on what page the user is on and\r\n     * how many choices are remaining.\r\n     */\r\n    private get navigatorButtons(): ActionRowBuilder<ButtonBuilder> {\r\n        //\r\n        // Basic Button Template\r\n        //\r\n        const {\r\n            buttonStyles,\r\n            customId,\r\n            selected,\r\n            page,\r\n            maxChoices = this.options.length\r\n        } = this.data;\r\n\r\n        // ----------------------------------\r\n        // Page buttons logic\r\n        let isAtStart = page.current === 0;\r\n        let isAtEnd = page.current === page.max;\r\n\r\n        if (selected.size >= maxChoices) {\r\n            // EDGE CASE SCENARIO\r\n            // There are 3 pages and 5 max choices:\r\n            // Page 1 - 0\r\n            // Page 2 - 3 - Current\r\n            // Page 3 - 2\r\n            //\r\n            // you must not select page 1, as you cannot have a maxchoice set of 0.\r\n            // therefore, we check what pages have selections on them.\r\n            const indexStart = page.current * page.length;\r\n            const indexEnd = indexStart + page.length;\r\n            isAtStart ||= selected.every((_, n) => n >= indexStart);\r\n            isAtEnd ||= selected.every((_, n) => n <= indexEnd);\r\n        }\r\n        return new ActionRowBuilder<ButtonBuilder>().addComponents(\r\n            new ButtonBuilder()\r\n                .setLabel('⏮️')\r\n                .setStyle(buttonStyles.navigator)\r\n                .setDisabled(isAtStart)\r\n                .setCustomId(`${customId}--firstPage`),\r\n            new ButtonBuilder()\r\n                .setLabel('◀️')\r\n                .setStyle(buttonStyles.navigator)\r\n                .setDisabled(isAtStart)\r\n                .setCustomId(`${customId}--prevPage`),\r\n            // The center button displays what page you're currently on.\r\n            new ButtonBuilder()\r\n                .setLabel(`Page ${page.current + 1}/${page.max + 1}`)\r\n                .setStyle(buttonStyles.middle)\r\n                .setDisabled(true)\r\n                .setCustomId('btn-never'),\r\n            new ButtonBuilder()\r\n                .setLabel('▶️')\r\n                .setStyle(buttonStyles.navigator)\r\n                .setDisabled(isAtEnd)\r\n                .setCustomId(`${customId}--nextPage`),\r\n            new ButtonBuilder()\r\n                .setLabel('⏭️')\r\n                .setStyle(buttonStyles.navigator)\r\n                .setDisabled(isAtEnd)\r\n                .setCustomId(`${customId}--lastPage`)\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * @callback visualizeCallback\r\n * @template ChoiceType\r\n * @param {ChoiceType} option An element from the `options` array.\r\n * @param {number} index The element's index in the `options` array.\r\n */\r\n"],"mappings":"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","names":[]}